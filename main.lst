     1                                  ; Assembler Linux Template
     2                                  ; Program Description: Add/Inc/Dec/Sub Practice
     3                                  
     4                                  ; Author: Jenny Abella
     5                                  
     6                                  ; Creation Date: 21/02/2018
     7                                  
     8                                  ; Revisions: 0
     9                                  
    10                                  ; Date: 21/02/2018       Modified by: 21/02/2018
    11                                  
    12                                  ; Operating System: Linux Mint 64-bit 18 Mate
    13                                  
    14                                  ; IDE/Compiler: Geany / NASM
    15                                  
    16                                  %include "./functions.inc"
    17                              <1> ;
    18                              <1> ;Include file for the functions library
    19                              <1> ;
    20                              <1> sys_exit	equ	1h
    21                              <1> sys_read	equ	3h
    22                              <1> sys_write	equ	4h
    23                              <1> stdin		equ	0h
    24                              <1> stdout		equ	1h
    25                              <1> stderr		equ	3h
    26                              <1> 
    27                              <1> ;Print a string with no delimeter to the console
    28                              <1> ;Arguments:	Address of the String (Stack)
    29                              <1> ;			Length of the String (Stack)
    30                              <1> extern		PrintText
    31                              <1> 
    32                              <1> ;Print an endl character to the console
    33                              <1> ;Arguments:	None
    34                              <1> extern		Printendl
    35                              <1> 
    36                              <1> ;Print a 32bit numeric value as a Decimal to the console
    37                              <1> ;Arguments:	DWORD Value (stack)
    38                              <1> extern		Print32bitNumDecimal
    39                              <1> 
    40                              <1> ;Print a 32bit signed numeric value as a Decimal to the console
    41                              <1> ;Arguments:	DWORD Value (stack)
    42                              <1> extern		Print32bitSNumDecimal
    43                              <1> 
    44                              <1> ;Print a 32bit numeric value as a Binary to the console
    45                              <1> ;Arguments:	DWORD Value (stack)
    46                              <1> extern		Print32bitNumBinary
    47                              <1> 
    48                              <1> ;Print a 32bit numeric value as a Binary to the console
    49                              <1> ;Arguments:	DWORD Value (stack)
    50                              <1> extern		Print32bitFullBinary
    51                              <1> 
    52                              <1> ;
    53                              <1> ;Print a full 32-bits binary number in Floating Point format.
    54                              <1> ;Stack contents:
    55                              <1> ;	Value to Print to an Ascii String
    56                              <1> extern		Print32bitFloatBinary
    57                              <1> 
    58                              <1> ;Print a 32bit numeric value as a Hexidecimal to the console
    59                              <1> ;Arguments:	DWORD Value (stack)
    60                              <1> extern		Print32bitNumHex
    61                              <1> 
    62                              <1> ;Print The General Purpose Registers to the console
    63                              <1> ;Arguments:	None
    64                              <1> extern		PrintRegisters
    65                              <1> 
    66                              <1> ;Print The floating point Registers to the console
    67                              <1> ;Arguments:	None
    68                              <1> extern		PrintFloatingRegisters
    69                              <1> 
    70                              <1> ;Print a string with an ending 00h delimiter to the console
    71                              <1> ;Arguments:	Address of the String (Stack)
    72                              <1> extern		PrintString
    73                              <1> 
    74                              <1> ;Print a space to the console
    75                              <1> ;Arguments:	None
    76                              <1> extern		PrintSpace
    77                              <1> 
    78                              <1> ;Print a comma followed by a space to the console
    79                              <1> ;Arguments:	None
    80                              <1> extern		PrintComma
    81                              <1> 
    82                              <1> ;Print a Double Word floating point number
    83                              <1> ;Arguments: The floating point number to be printed (Stack)
    84                              <1> extern		PrintDWFloat
    85                              <1> 
    86                              <1> ;Call the function to get the CPU's Time Stamp Counter
    87                              <1> ;Arguments: None
    88                              <1> ;Return:  eax
    89                              <1> extern		GetTSC
    90                              <1> 
    91                              <1> ;Input Unsigned Int	
    92                              <1> ;This function will let the user input a string, then it will check it to make sure it
    93                              <1> ;is a positive integer.  It will then convert the ASCII string into a DWORD and return
    94                              <1> ;that value in the EAX register.
    95                              <1> ;Arguments: None
    96                              <1> ;Return: 	eax will contain the usigned ingeter
    97                              <1> ;			Carry flag will be set if invalid integer was input
    98                              <1> extern		InputUInt
    99                              <1> 
   100                              <1> ;Input Signed Int  TBD (just copied from input unsigned int - no code updated)
   101                              <1> ;This function will let the user input a string, then it will check it to make sure it
   102                              <1> ;is a positive integer.  It will then convert the ASCII string into a DWORD and return
   103                              <1> ;that value in the EAX register.
   104                              <1> ;Arguments: None
   105                              <1> ;Return: 	eax will contain the usigned ingeter
   106                              <1> ;			Carry flag will be set if invalid integer was input
   107                              <1> extern		InputSInt
   108                              <1> 
   109                              <1> ;Input Binary Number	
   110                              <1> ;This function will let the user input a string, then it will check it to make sure it
   111                              <1> ;is a binary number.  It will then convert the ASCII string into a DWORD and return
   112                              <1> ;that value in the EAX register.
   113                              <1> ;Arguments: None
   114                              <1> ;Return: 	eax will contain the number
   115                              <1> ;			Carry flag will be set if invalid binary number was input
   116                              <1> extern		InputBin
   117                              <1> 
   118                              <1> ;Input Hexidecimal Number	
   119                              <1> ;This function will let the user input a string, then it will check it to make sure it
   120                              <1> ;is a binary number.  It will then convert the ASCII string into a DWORD and return
   121                              <1> ;that value in the EAX register.
   122                              <1> ;Arguments: None
   123                              <1> ;Return: 	eax will contain the number
   124                              <1> ;			Carry flag will be set if invalid binary number was input
   125                              <1> extern		InputHex
   126                              <1> 
   127                              <1> ;Input a Floating Point Number	
   128                              <1> ;This function will let the user input a string, then it will check it to make sure it
   129                              <1> ;is a valid decimal number.  It will then convert the ASCII string into a DWORD and return
   130                              <1> ;that value in the ST(0) register.
   131                              <1> ;Arguments: None
   132                              <1> ;Return: 	eax will contain the number
   133                              <1> ;			Carry flag will be set if invalid binary number was input
   134                              <1> extern		InputFloat
   135                              <1> 
   136                                  
   137                                  bits 32
   138                                  
   139                                  section .data
   140                                  
   141                                    ;Initialized data definitions go here
   142                                  	
   143 00000000 57656C636F6D652074-     	openPrompt	db	"Welcome to my program", 0ah, 0dh, 0h
   144 00000009 6F206D792070726F67-
   145 00000012 72616D0A0D00       
   146 00000018 50726F6772616D2065-     	closePrompt	db	"Program ending, have a nice day.", 0ah, 0dh, 0h
   147 00000021 6E64696E672C206861-
   148 0000002A 76652061206E696365-
   149 00000033 206461792E0A0D00   
   150                                  	
   151                                  section .bss
   152                                    ;Uninitialized memory reservations go here
   153                                    
   154 00000000 <res 00000001>          	byte1	resb	1		;Allocate 1 byte
   155 00000001 <res 00000002>          	wrd1	resw	1		;Allocate 2 bytes
   156 00000003 <res 00000004>          	dbl1	resd	1		;Allocate 4 bytes
   157                                  
   158                                  section .text
   159                                  
   160                                  global _start
   161                                  _start:
   162 00000000 90                        nop
   163                                  
   164 00000001 68[00000000]            	push	openPrompt		;Print the opening/welcome prompt
   165 00000006 E8(00000000)            	call	PrintString		;
   166 0000000B E8(00000000)            	call	Printendl		;
   167                                  
   168                                  	;Code starts here
   169                                  	
   170                                  	;add
   171 00000010 83C005                  	add eax, 5h
   172 00000013 8005[00000000]05        	add [byte1], BYTE 5h
   173                                  	
   174                                  	;sub
   175 0000001A 83E805                  	sub eax, 5h
   176 0000001D 802D[00000000]05        	sub [byte1], BYTE 5h
   177                                  	
   178                                  	;negate eax
   179 00000024 40                      	inc eax
   180 00000025 F7D8                    	neg eax
   181 00000027 F7D8                    	neg eax
   182 00000029 F61D[00000000]          	neg BYTE [byte1]
   183 0000002F 66F71D[01000000]        	neg WORD [wrd1]
   184                                  
   185                                  	;increment
   186 00000036 48                      	dec		eax
   187 00000037 40                      	inc		eax
   188 00000038 6640                    	inc		ax
   189 0000003A FEC0                    	inc		al
   190 0000003C FEC4                    	inc		ah
   191                                  	
   192 0000003E C605[00000000]00        	mov	[byte1], BYTE 0h	;Zero out byte1 memoruy location
   193 00000045 FE05[00000000]          	inc BYTE [byte1]		;Add one to it
   194                                  	
   195 0000004B 66C705[01000000]00-     	mov	[wrd1], WORD 0h		;Zero out a word variable
   196 00000053 00                 
   197 00000054 66FF05[01000000]        	inc WORD [wrd1]			;Add one to it
   198                                  	
   199 0000005B C705[03000000]0000-     	mov	[dbl1], DWORD 0h	;Zero out a Double word variable
   200 00000063 0000               
   201 00000065 FF05[03000000]          	inc DWORD	[dbl1]		;Add one to it
   202                                  	
   203                                  	;decrement
   204 0000006B FE0D[00000000]          	dec 	BYTE [byte1]	;Subtract one to it
   205                                  	
   206 00000071 66FF0D[01000000]        	dec		WORD [wrd1]		;Subtract one to it
   207                                  	
   208 00000078 FF0D[03000000]          	dec 	DWORD [dbl1]	;Subtract one to it
   209                                  	
   210 0000007E 68[18000000]            	push	closePrompt		;Print the closing/ending prompt
   211 00000083 E8(00000000)            	call	PrintString		;
   212 00000088 E8(00000000)            	call	Printendl		;
   213                                  		
   214                                  	;Code ends here	
   215 0000008D 90                      	nop
   216 0000008E B801000000              	mov eax,1 ; Exit system call value
   217 00000093 BB00000000              	mov ebx,0 ; Exit return code
   218 00000098 CD80                    	int 80h ; Call the kernel
